#include <string>
#include "boost/optional.hpp"
#include "NSWConfiguration/ADDCConfig.h"

#include "boost/property_tree/json_parser.hpp"

nsw::ADDCConfig::ADDCConfig(ptree config):
    SCAConfig(config)
{
    /// ADDC has 2 ART ASICs
    for (int i = 0; i < 2; i++) {
        std::string artname = "art" + std::to_string(i);
        if (config.find(artname) != config.not_found()) {
            // std::cout << "Found ART " << artname << std::endl;
            // ERS_DEBUG(3, "ART id:" << artname);
            m_arts.emplace_back(config.get_child(artname));
            m_arts.back().setName(artname);
            m_arts.back().setIndex(i);
        }
    }

    /// ART/GBTx registers
    m_ARTCoreregisters     = std::vector<uint8_t> {9, 10, 11, 12};
    m_ARTregisters         = std::vector<uint8_t> {21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   2};
    m_ARTregistervalues    = std::vector<uint8_t> {0xff, 0x3f, 0x00, 0xf0, 0xff, 0x03, 0x00, 0xff, 0x3f, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x80};
    m_GBTx_eport_registers = std::vector<uint8_t> {78,79,80,102,103,104,126,127,128,150,151,152,174,175,176,198,199,200,222,223,224};
    m_GBTx_ConfigurationData = std::vector<uint8_t> {
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x23,0x03,0x33,0x03,0x03,0x00,0x00,0x00,
            0x1f,0x03,0x7f,0x28,0x00,0x15,0x15,0x15,0x66,0x00,0x0d,0x42,
            0x00,0x0f,0x04,0x08,0x00,0x20,0x00,0x00,0x00,0x00,0x15,0x15,
            0x15,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
            0x00,0x00,0x00,0x3f,0xdd,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
            0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x3f,0x3f,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
            0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x88,0x88,0x08,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x40,0x40,0x40,0x2a,
            0x2a,0x2a,0x00,0x00,0xff,0xff,0xff,0x40,0x40,0x40,0x2a,0x2a,
            0x2a,0x4e,0x4e,0x4e,0xaa,0x0a,0x07,0x00,0x11,0x11,0x11,0x11,
            0x11,0x22,0x22,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
            0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0xaa,0x01,0x00,0x01
    };

}

void nsw::ADDCConfig::dump() {
    // std::cout << "Number of ART: " << m_arts.size() << std::endl;
}

