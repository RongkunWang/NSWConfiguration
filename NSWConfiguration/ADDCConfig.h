/// ADDC Configuration class

#ifndef NSWCONFIGURATION_NSWCONFIGURATION_ADDCCONFIG_H_
#define NSWCONFIGURATION_NSWCONFIGURATION_ADDCCONFIG_H_

#include <array>
#include <vector>

#include "NSWConfiguration/SCAConfig.h"
#include "NSWConfiguration/ARTConfig.h"

namespace nsw {
  namespace addc {
    constexpr size_t NUM_ART_REGISTERS = 15;
    constexpr size_t NUM_GBTX_REGISTERS = 369;
  }

  class ADDCConfig: public SCAConfig {
  private:
    std::vector<ARTConfig> m_arts;

    static constexpr std::array<uint8_t, 4> m_ARTCoreregisters{9, 10, 11, 12};

    static constexpr std::array<uint8_t, nsw::addc::NUM_ART_REGISTERS> m_ARTregisters{
       21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   2};

    static constexpr std::array<uint8_t, nsw::addc::NUM_ART_REGISTERS> m_ARTregistervalues{
       0xff, 0x3f, 0x00, 0xf0, 0xff, 0x03, 0x00,
       0xff, 0x3f, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x80};

    static constexpr std::array<uint8_t, 21> m_GBTx_eport_registers{
       78, 79, 80, 102, 103, 104, 126, 127, 128, 150, 151, 152,
       174, 175, 176, 198, 199, 200, 222, 223, 224};

    static constexpr std::array<uint8_t, nsw::addc::NUM_GBTX_REGISTERS> m_GBTx_ConfigurationData{
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x23, 0x03, 0x33, 0x03, 0x03, 0x00, 0x00, 0x00,
       0x1f, 0x03, 0x7f, 0x28, 0x00, 0x15, 0x15, 0x15, 0x66, 0x00, 0x0d, 0x42,
       0x00, 0x0f, 0x04, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15,
       0x15, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
       0x00, 0x00, 0x00, 0x3f, 0xdd, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x3f, 0x3f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
       0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88, 0x08, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x40, 0x40, 0x40, 0x2a,
       0x2a, 0x2a, 0x00, 0x00, 0xff, 0xff, 0xff, 0x40, 0x40, 0x40, 0x2a, 0x2a,
       0x2a, 0x4e, 0x4e, 0x4e, 0xaa, 0x0a, 0x07, 0x00, 0x11, 0x11, 0x11, 0x11,
       0x11, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
       0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x01};

 public:
    //! Constructor.
    //! The ptree in the argument should contain
    //! - OpcServerIp, OpcNodeId
    explicit ADDCConfig(const boost::property_tree::ptree& config);
    ~ADDCConfig() = default;

    void dump();

    const ARTConfig & getART(size_t i) const {return m_arts.at(i);}
    const std::vector<ARTConfig> & getARTs() const {return m_arts;}

    auto ARTCoreregisters()       const -> decltype(m_ARTCoreregisters)       {return m_ARTCoreregisters;}
    auto ARTregisters()           const -> decltype(m_ARTregisters)           {return m_ARTregisters;}
    auto ARTregistervalues()      const -> decltype(m_ARTregistervalues)      {return m_ARTregistervalues;}
    auto GBTx_eport_registers()   const -> decltype(m_GBTx_eport_registers)   {return m_GBTx_eport_registers;}
    auto GBTx_ConfigurationData() const -> decltype(m_GBTx_ConfigurationData) {return m_GBTx_ConfigurationData;}
};

}  // namespace nsw

#endif  // NSWCONFIGURATION_NSWCONFIGURATION_ADDCCONFIG_H_
